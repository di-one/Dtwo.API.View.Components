@implements IGrid

@{
    var component = ComponentResolver.ResolveComponent<IGrid>();
    if (component != default)
    {
        <DynamicComponent Type="@component.GetType()" Parameters="@GetParameters()" />
    }
    else
    {
        
    }
}

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }
    [Parameter] public EJustifyContent JustifyContent { get; set; } = EJustifyContent.Normal;
    [Parameter] public EAlignItems AlignItems { get; set; } = EAlignItems.Normal;
    [Parameter] public string Gap { get; set; } = "0";

    private Dictionary<string, object> GetParameters()
    {
        return new Dictionary<string, object>
            {
                ["ChildContent"] = ChildContent,
                ["AdditionalAttributes"] = AdditionalAttributes,
                ["JustifyContent"] = JustifyContent,
                ["AlignItems"] = AlignItems,
                ["Gap"] = Gap
            };
    }
}
