@implements ICircularProgressBar

@{
    var component = ComponentResolver.ResolveComponent<ICircularProgressBar>();
    if (component != default)
    {
        <DynamicComponent @attributes=AdditionalAttributes Type="@component.GetType()" Parameters="@GetParameters()" />
    }
    else
    {
        <div id="loadingScreen" class="d-flex justify-content-center align-items-center" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: white; z-index: 1000;">
            <div class="text-center">
                <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading ...</p>
            </div>
        </div>
    }
}

@code {
        [Parameter]
        public Dictionary<string, object> AdditionalAttributes { get; set; }

        [Parameter]
        public EProgressBarMode Mode { get; set; } = EProgressBarMode.Determinate;

        [Parameter]
        public EProgressBarStyle Style { get; set; } = EProgressBarStyle.Primary;

        [Parameter]
        public ECircularProgressBarSize Size { get; set; } = ECircularProgressBarSize.Large;

        [Parameter]
        public int Value { get; set; }

        [Parameter]
        public bool ShowValue { get; set; }

        [Parameter]
        public string Unit { get; set; }

        private Dictionary<string, object> GetParameters()
        {
            return new Dictionary<string, object>
            {
                ["AdditionalAttributes"] = AdditionalAttributes,
                ["Mode"] = Mode,
                ["Style"] = Style,
                ["Size"] = Size,
                ["Value"] = Value,
                ["ShowValue"] = ShowValue,
                ["Unit"] = Unit
            };
        }
}
