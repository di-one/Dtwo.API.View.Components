@typeparam TValue
@implements INumeric<TValue>

@{
    var fieldLayoutComponent = ComponentResolver.ResolveComponent<INumeric<TValue>>();
    if (fieldLayoutComponent != default)
    {
        <DynamicComponent Type="@fieldLayoutComponent.GetType()" Parameters="@GetParameters()" />
    }
    else
    {

    }
}


@code{
    [Parameter] public TValue Value { get; set; }
    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter] public EventCallback<TValue> Change { get; set; }
    [Parameter] public decimal? Min { get; set; }
    [Parameter] public decimal? Max { get; set; }
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public string Step { get; set; }
    [Parameter] public string Format { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; }
    [Parameter] public string Name { get; set; }

    private Dictionary<string, object> GetParameters()
    {
        var parameters = new Dictionary<string, object>
        {
            { nameof(Value), Value },
            { nameof(ValueChanged), ValueChanged },
            { nameof(Change), Change },
            { nameof(Min), Min },
            { nameof(Max), Max },
            { nameof(Placeholder), Placeholder },
            { nameof(Step), Step },
            { nameof(Format), Format },
            { nameof(Disabled), Disabled },
            { nameof(AdditionalAttributes), AdditionalAttributes },
            { nameof(Name), Name }
        };

        return parameters;
    }
}