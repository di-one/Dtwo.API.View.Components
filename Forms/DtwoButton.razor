@implements IButton

@{
    var buttonComponent = ComponentResolver.ResolveComponent<IButton>();
    if (buttonComponent != default)
    {
        <DynamicComponent Type="@buttonComponent.GetType()" Parameters="@GetParameters()" />
    }
    else
    {
        <button @attributes="AdditionalAttributes" @onclick="((args) => InternalOnClicked(args))" class="btn btn-primary" type="button">
            @ChildContent
        </button>
    }
}

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public Theming.EColor Color { get; set; } = EColor.Primary;
    [Parameter] public Action<MouseEventArgs> OnClicked { get; set; }
    [Parameter] public Theming.EVariant Variant { get; set; }
    [Parameter] public EButtonSize Size { get; set; } = EButtonSize.Medium;
    [Parameter] public bool IsBusy { get; set; } = false;
    [Parameter] public string BusyText { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    private Dictionary<string, object> GetParameters()
    {
        return new Dictionary<string, object>
            {
                ["ChildContent"] = ChildContent,
                ["OnClicked"] = OnClicked,
                ["Color"] = Color,
                ["Variant"] = Variant,
                ["Size"] = Size,
                ["IsBusy"] = IsBusy,
                ["BusyText"] = BusyText,
                ["Disabled"] = Disabled,
                ["AdditionalAttributes"] = AdditionalAttributes,
            };
    }

        private void InternalOnClicked(MouseEventArgs args)
        {
            OnClicked?.Invoke(args);
        }
}
